#!/bin/bash

set -e

# export RACK_ENV=${RACK_ENV:-"production"}

shopt -s dotglob

echo "---> Installing application source ..."

# Must use rsync instead of mv, since mv cannot mv to folder with existing data
rsync -a /tmp/src/ $APP_HOME
chown -R rails:rails $APP_HOME

# Them remove tmp src
rm -rf /tmp/src
# mv -f /tmp/src/* ./

echo "---> Installing gems ..."
if [ -f $APP_HOME/Gemfile ]; then
  pushd $APP_HOME
  ADDTL_BUNDLE_ARGS="--deployment"
  if [[ "$RAILS_ENV" == "production" || "$RACK_ENV" == "production" ]]; then
    ADDTL_BUNDLE_ARGS="--without development:test"
  fi
  echo "---> Running 'bundle install ${ADDTL_BUNDLE_ARGS}' ..."
  # bundle install --path ./bundle ${ADDTL_BUNDLE_ARGS}
  bundle install ${ADDTL_BUNDLE_ARGS}

  echo "---> Cleaning up unused ruby gems ..."
  bundle clean -V
  popd
fi

if [ -f $APP_HOME/package.json ]; then
  pushd $APP_HOME
  echo "---> Running yarn install"
  yarn install
  popd
fi

if [[ "$RAILS_ENV" == "production" || "$RACK_ENV" == "production" ]]; then
  pushd $APP_HOME
  echo "---> Starting asset compilation ..."
  bundle exec rails assets:precompile
  rm -rf ./node_modules
  popd
fi

# Fix source directory permissions
# fix-permissions ./
/usr/local/bin/fix-permissions $APP_HOME

# Make the ./tmp folder world writeable as Rails or other frameworks might use
# it to store temporary data (uploads/cache/sessions/etcd).
# The ./db folder has to be writeable as well because when Rails complete the
# migration it writes the schema version into ./db/schema.db
set +e
pushd $APP_HOME
'[[ -d ./tmp ]] && chgrp -R 0 ./tmp && chmod -R g+rw ./tmp'
'[[ -d ./db ]]  && chgrp -R 0 ./db && chmod -R g+rw  ./db'
popd
set -e

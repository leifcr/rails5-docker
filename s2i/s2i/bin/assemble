#!/bin/bash

set -e

# export RACK_ENV=${RACK_ENV:-"production"}

shopt -s dotglob
echo "---> Installing application source ..."
mv -f /tmp/src/* ./

echo "---> Installing gems ..."
if [ -f Gemfile ]; then
  ADDTL_BUNDLE_ARGS="--deployment --without development:test"
  # if [ -f Gemfile.lock ]; then
  #   ADDTL_BUNDLE_ARGS="--deployment"
  # fi

  # if [[ "$RAILS_ENV" == "development" || "$RACK_ENV" == "development" ]]; then
  #   # BUNDLE_WITHOUT=${BUNDLE_WITHOUT:-"test"}
  # elif [[ "$RAILS_ENV" == "test" || "$RACK_ENV" == "test" ]]; then
  #   # BUNDLE_WITHOUT=${BUNDLE_WITHOUT:-"development"}
  # else
  #   BUNDLE_WITHOUT=${BUNDLE_WITHOUT:-"development:test"}
  # fi
  #
  # if [ -n "$BUNDLE_WITHOUT" ]; then
  #   ADDTL_BUNDLE_ARGS+=" --without $BUNDLE_WITHOUT"
  # fi

  ADDTL_BUNDLE_ARGS+=" --jobs 20 --retry 5"

  echo "---> Running 'bundle install ${ADDTL_BUNDLE_ARGS}' ..."
  # bundle install --path ./bundle ${ADDTL_BUNDLE_ARGS}
  bundle install ${ADDTL_BUNDLE_ARGS}

  echo "---> Cleaning up unused ruby gems ..."
  bundle clean -V
fi

if [ -f package.json ]; then
  echo "---> Running yarn install"
  yarn install
fi

if [[ "$RAILS_ENV" == "production" || "$RACK_ENV" == "production" ]]; then
  echo "---> Starting asset compilation ..."
  bundle exec rails assets:precompile
fi

# Fix source directory permissions
fix-permissions ./

# Make the ./tmp folder world writeable as Rails or other frameworks might use
# it to store temporary data (uploads/cache/sessions/etcd).
# The ./db folder has to be writeable as well because when Rails complete the
# migration it writes the schema version into ./db/schema.db
set +e
[[ -d ./tmp ]] && chgrp -R 0 ./tmp && chmod -R g+rw ./tmp
[[ -d ./db ]] && chgrp -R 0 ./db && chmod -R g+rw ./db
set -e
